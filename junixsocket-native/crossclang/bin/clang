#!/bin/bash
#
# crossclang
# A helper script to simplify cross-compilation
#
# Copyright 2019 Christian KohlschÃ¼tter
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# if you don't specify a -target, or specify -target current, we infer the name of the current target,
#     and look up for our configuration
# if you specify -target default, the default clang compiler will be used 
# if you specify -target and some other value, we check the available targets in target-sdks
#     and add custom options to clang to simplify cross-compilation
# if you specify an invalid value to -target, the set of available targets is shown as an error message

currentDir=$(cd "$(dirname $0)"; pwd)
clangDir=$(cd "$(dirname $(which clang))"; pwd)
findOtherClang=0
if [ "$currentDir" == "$clangDir" ]; then
    # looks like we're in the PATH
    findOtherClang=1
fi

if [[ -z "$(which llvm-ar)" || $findOtherClang -gt 0 ]]; then
  # let's add the latest LLVM to the path
  latestLLVM=$(for f in /usr/local/Cellar/llvm/*/bin; do echo $f; done | sort -r -n | head -n 1)
  if [[ -n "$latestLLVM" && -d "$latestLLVM" ]]; then
      export PATH="$latestLLVM:$PATH"
  fi
fi

clangDir=$(cd "$(dirname $(which clang))"; pwd)
if [ "$currentDir" == "$clangDir" ]; then
    echo "ARGH"
    export PATH="/usr/bin:/usr/local/bin:$PATH"
    clangDir=$(cd "$(dirname $(which clang))"; pwd)
    if [ "$currentDir" == "$clangDir" ]; then
        echo "crossclang detected in PATH. Can't find real clang, giving up" >&2
        exit 1
    fi
fi

clangArgs=()
target=""
sdkroot_base=""

needLinker=1
isShared=0
nostdlib=0

hasShared=0
targetIndex=
defaultFallback=0
looksLikeCPP=0

# parse arguments
previous=""

hasArgs=$#
hasFiles=0
withAndWithoutLC=0
hasO=0
outputFile=

while [ $# -gt 0 ]; do
  v="$1"
  shift
  
  skipArg=0

  case "$previous" in
      -target )   target="$v"
                  targetIndex=${#clangArgs[@]}
                  ;;
      -isdkroot ) sdkroot="$v" ;;
  esac
  
  case "$v" in 
      -E ) needLinker=0 ;;
      -fsyntax-only ) needLinker=0 ;;
      -c ) needLinker=0 ;;
      -S ) needLinker=0 ;;
      -bundle ) isShared=1 ;;
      -dynamic ) isShared=1 ;;
      -dynamiclib ) isShared=1 ;;
      -shared ) isShared=1; hasShared=1 ;;
      -nostdlib ) nostdlib=1 ;;
      -Xcrossclang-with-and-without-lc ) withAndWithoutLC=1; skipArg=1 ;;
      -o ) hasO=1; skipArg=1 ;;
      *.cc ) looksLikeCPP=1 ;;
      *.cpp ) looksLikeCPP=1 ;;
      *.cxx ) looksLikeCPP=1 ;;
      *.c++ ) looksLikeCPP=1 ;;
      *.hh ) looksLikeCPP=1 ;;
      *.hpp ) looksLikeCPP=1 ;;
      *.mm ) looksLikeCPP=1 ;;
      c++ ) if [ "$previous" == "-x" ]; then looksLikeCPP=1; fi ;;
      - ) hasFiles=1 ;;
  esac
  
  if [[ $hasFiles -eq 0 && -n "$v" && "${v:0:1}" != "-" && -e "$v" ]]; then
      hasFiles=1
  fi
  
  if [[ "$previous" == "-o" ]]; then
      outputFile="$v"
      skipArg=1
  fi

  if [[ "$skipArg" -eq 0 ]]; then
      clangArgs+=("$v")
  fi

  previous="$v"
done

output_args=()
if [ $hasO -gt 0 ]; then
    output_args+=("-o" "$outputFile")
fi

if [ $hasFiles -eq 0 ]; then
    needLinker=0
fi

if [ "$target" == "default" ]; then
    defaultFallback=1
    target=""
elif [ "$target" == "current" ]; then
    target=
fi

if [[ -z "$target" ]]; then
    if [ $defaultFallback -gt 0 ]; then
        PATH=/usr/bin:$PATH
    fi

    target=$(clang --version | grep "^Target: " | head -n 1)
    target=${target##* }
    if [ -z "$target" ]; then
        echo "Could not determine target" >&2
        exit 1
    fi

    if [ $defaultFallback -gt 0 ]; then
        if [ -n "$targetIndex" ]; then
            clangArgs[$targetIndex]="$target"
        fi
        exec clang ${output_args[@]} ${clangArgs[@]}
    fi
fi

sdkroot_bases=()
if [ -n "$sdkroot_base" ]; then
    sdkroot_bases+=("$sdkroot_base")
fi
sdkroot_bases+=(
    "$(dirname $0)/../target-sdks"
    "$HOME/.crossclang/target-sdks"
    "/opt/crossclang/target-sdks"
)

if [[ "$target" == "/"* ]]; then
    sdkroot="$target"
else
    for base in ${sdkroot_bases[@]}; do
        if [[ -n "$base" && -f "$base/$target/target.conf" ]]; then
            sdkroot_base="$base"
            break
        fi
    done
fi 

if [ -z "$sdkroot" ]; then
    if [[ -n "$sdkroot_base" && -n "$target" ]]; then
        sdkroot="$sdkroot_base/$target"
    fi
fi

sdkrootOrig="$sdkroot"
sdkroot=$(cd "$sdkroot" 2>/dev/null && pwd)
targetConf="$sdkroot/target.conf"

if [[ $? -ne 0 || -z "$sdkrootOrig" || ! -f "$targetConf" ]]; then
    echo "Could not find SDK root for target: $target" >&2
    echo "Available targets:$(for f in $(find "${sdkroot_bases[@]}" -mindepth 1 -maxdepth 1 2>/dev/null); do if [ -f "$f/target.conf" ]; then echo -n $'\n'"- $(basename $f)"; fi done)" >&2
    echo "- current (use current target)"
    echo "- default (use default clang)"
    exit 1
fi

clangLinkerArgs=()

target_include_path=()
target_library_path=()
target_framework_path=()
source "$targetConf"

target=$(cd "$sdkroot"; basename "$(pwd)" )
sdkroot=$(cd "$sdkroot"; pwd )

triple="$target"
if [ -n "$target_triple" ]; then
    triple="$target_triple"
    if [ -n "$targetIndex" ]; then
        clangArgs[$targetIndex]="$target_triple"
    else
        clangArgs+=("-target" "$target_triple")
    fi
fi

if [ $hasArgs -eq 0 ]; then
    needLinker=0
fi

if [ $needLinker -gt 0 ]; then
    ldPath=""
    case "$target_linker" in
      ld)
        ldPath=$(which ld.lld)
        if [ $nostdlib -gt 0 ]; then
          clangLinkerArgs+=("-fPIC")
        fi

        if [ $isShared -gt 0 ]; then
          if [[ $hasShared -eq 0 ]]; then
            clangLinkerArgs+=("-shared")
          fi
        fi
        
        clangLinkerArgs+=("-Wl,--sysroot=$sdkroot")
        for path in ${target_library_path[@]}; do
            if [ -d "$sdkroot/$path" ]; then
                clangLinkerArgs+=("-Wl,-L=$path")
            fi
        done
        
        ;;
      ld64)
        ldPath=$(which ld64.lld)
        clangLinkerArgs+=("-Wl,-sdk_version,10.7")
        #if [ $nostdlib -gt 0 ]; then
        #  clangLinkerArgs+=("-Wl,-undefined,dynamic_lookup")
        #fi
        clangLinkerArgs+=("-Wl,-Z,-syslibroot,$sdkroot")
        
        for path in ${target_library_path[@]}; do
            if [ -d "$sdkroot/$path" ]; then
                clangLinkerArgs+=("-Wl,-L$path")
            fi
        done
        for path in ${target_framework_path[@]}; do
            if [ -d "$sdkroot/$path" ]; then
                clangLinkerArgs+=("-Wl,-F$path")
            fi
        done
        ;;
      *)
        echo "Warning: Unknown target linker: $target_linker" >&2
        ;; 
    esac
    
    if [[ -n "$ldPath" && -f "$ldPath" ]]; then
      clangLinkerArgs+=("-fuse-ld=$ldPath")
    fi
fi

isystem_decls=()
isystem_decls+=("-isysroot" "$sdkroot")

for include in ${target_include_cpp_path[@]}; do
    isystem_decls+=("-cxx-isystem$sdkroot/$include")
    if [ $looksLikeCPP -gt 0 ]; then
        # NOTE: working around an issue where -cxx-isystem is ignored
        isystem_decls+=("-iwithsysroot" "$include")
    fi
done
for include in ${target_include_path[@]}; do
    isystem_decls+=("-iwithsysroot" "$include")
done

for path in ${target_framework_path[@]}; do
    isystem_decls+=("-iframeworkwithsysroot" "$path")
done

isystem_decls+=("-imacros" "$sdkroot/target.h")

if [ $hasFiles -eq 0 ]; then
    isystem_decls=()
fi

# set -x
if [[ $withAndWithoutLC -eq 1 ]]; then
  nodepsOut="${outputFile%.*}.nodeps.${outputFile##*.}"
  clang --sysroot "$sdkroot" ${isystem_decls[@]} ${clangLinkerArgs[@]} -lc ${output_args[@]} ${clangArgs[@]} && \
  clang --sysroot "$sdkroot" ${isystem_decls[@]} ${clangLinkerArgs[@]} -o "$nodepsOut" ${clangArgs[@]}
else
  exec clang --sysroot "$sdkroot" ${isystem_decls[@]} ${clangLinkerArgs[@]} ${output_args[@]} ${clangArgs[@]}
fi
