#!/bin/bash
#
# crossclang
# A helper script to simplify cross-compilation
#
# prepare-target-platform is to be run on the target platform
#
# Copyright 2018 Christian KohlschÃ¼tter
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

targetrootbase="$(dirname $0)/../target-platforms/"
triple=
if [ -z "$triple" ]; then
  target=$(clang --version | grep "^Target: " | head -n 1)
  target=${target##* }
  if [ -n "$target" ]; then
    triple="$target"
  fi
fi
if [ -z "$triple" ]; then
  triple=$(cd /usr/lib/gcc/ ; ls -d *-* | head -n 1)
fi
if [ -z "$triple" ]; then
  echo "Could not determine target triple" >&2
  exit 1
fi
if [ -z "$targetrootbase" ]; then
  echo "No targetrootbase specified" >&2
  exit 1
fi

while [ "${targetrootbase:(-1)}" == "/" ]; do
  targetrootbase="${targetrootbase%*/}"
done

targetroot="$targetrootbase/$triple"
echo "Target: $triple"
mkdir -p "$targetroot"

cd "$targetroot"
targetpwd=$(pwd)
cd - >/dev/null

echo "Location of target platform SDK: $targetpwd"

# add a few locations to the start of the include path (order is important!)
include_path=(
  /usr/lib/gcc/$triple/*/include
)
library_path=(
)
framework_path=(
)

# add linker paths from ld64 and friends
section=
IFS=$'\n'; for line in $( LANG=C PATH=/usr/bin:$PATH clang -Xlinker -v 2>&1 ); do
  if [ "${line:0:1}" == $'\t' ]; then
    path="${line:1}"
    case "$section" in
      library) library_path+=("$path") ;;
      framework) framework_path+=("$path") ;;
    esac
  else
    section=
    if [ "$line" == "Library search paths:" ]; then
      section="library"
    elif [ "$line" == "Framework search paths:" ]; then
      section="framework"
    fi
  fi
done

# add linker paths from ld and friends
for f in $(LANG=C PATH=/usr/bin:$PATH clang -Xlinker --verbose 2>/dev/null | grep SEARCH_DIR); do
  f=${f#SEARCH_DIR(\"}
  f=${f%\");}
  if [[ -n "$f" && -d "$f" ]]; then
    library_path+=("$f")
  fi
done

# add include paths from clang
section=
IFS=$'\n'; for line in $( LANG=C PATH=/usr/bin:$PATH /usr/bin/clang -E -x c -nobuiltininc /dev/null -v 2>&1 ); do
  if [ "${line:0:1}" == " " ]; then
    path="${line:1}"
    if [ "$path" == *" (framework directory)" ]; then
      continue
    fi
    case "$section" in
      include) include_path+=("$path") ;;
    esac
  else
    section=
    if [ "$line" == "#include <...> search starts here:" ]; then
      section="include"
    fi
  fi
done

# add some more paths to the end of the list
include_path+=(
)
if [ ${#include_path[@]} -eq 0 ]; then
    # fallback defaults
    include_path+=(
        /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/*.sdk/usr/include
        /usr/include
        /usr/include/linux
    )
fi

library_path+=(
    /lib
    /usr/lib
)

if [ ${#library_path[@]} -eq 0 ]; then
    # fallback defaults
    library_path+=(
        /usr/local/lib
    )
fi
framework_path+=(
)

declare -a arrIn
declare -a arrOut
function checkPaths() {
    arrOut=()
    for path in ${arrIn[@]}; do
        if [ "${path:0:1}" != "/" ]; then
            echo "Path must be absolute: $path" >&2
            continue
        fi
        if [ ! -d "$path" ]; then
            continue
        fi
        path=$(cd "$path"; pwd)
        
        skip=0
        for p in ${arrOut[@]}; do
          if [ "$p" == "$path" ]; then
            skip=1
            break
          fi
        done
        
        if [[ "$path" == "/usr/local/"* ]]; then
            # skip "/usr/local/..." paths by default
            continue
        fi
        if [[ "$path" == *".xctoolchain/"* ]]; then
            # skip Xcode toolchain paths by default
            continue
        fi
        
        if [ $skip -eq 0 ]; then
          arrOut+=("$path")
        fi
    done
}

arrIn=(${include_path[@]})
checkPaths
include_path=(${arrOut[@]})

arrIn=(${library_path[@]})
checkPaths
library_path=(${arrOut[@]})

arrIn=(${framework_path[@]})
checkPaths
framework_path=(${arrOut[@]})

linker=
if [ -n "$(ld -help 2>/dev/null| grep ld64)" ]; then
  linker=ld64
elif [ -n "$(ld -version 2>/dev/null| grep GNU)" ]; then 
  linker=ld
fi

targetConf="$targetroot/target.conf"
targetH="$targetroot/target.h"

cat >"$targetConf" <<EOT
# crossclang target configuration file
# created: $(date)
# on host: $(hostname)
# by user: $(whoami)
target_triple=$triple
target_linker=$linker
target_include_path=( $(for f in ${include_path[@]}; do printf "\n  %q" $f; done )
)
target_library_path=( $(for f in ${library_path[@]}; do printf "\n  %q" $f; done )
)
target_framework_path=( $(for f in ${framework_path[@]}; do printf "\n  %q" $f; done )
)
EOT

cat >"$targetH" <<EOT
/* crossclang target.h -- This header will automatically be included during compilation */
EOT

targetroot=$(cd "$targetroot" ; pwd)

cat <<EOT
Now synchronize the SDK with the following command:
    $(dirname $0)/rsync-target-platform "$targetroot"

If you do not wish to synchronize libraries at this point, enter this instead:
    $(dirname $0)/rsync-target-platform -L "$targetroot"
EOT
