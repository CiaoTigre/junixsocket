## junixsocket-native compiler configuration
## see this project's pom for custom properties that can be reused here

# NOTE: nar-maven-plugin hardcodes "gcc", even if you specify "clang" here (GccLinker#getLinker(LinkType))
x86_64.MacOSX.clang.linker.name=clang
x86_64.MacOSX.clang.linker.options=-target ${junixsocket.native.llvm.target}
x86_64.MacOSX.clang.c.compiler=clang
x86_64.MacOSX.clang.c.defines=
x86_64.MacOSX.clang.c.options=${junixsocket.native.clang.c.options} -I${project.basedir}/src/main/c/jni -target ${junixsocket.native.llvm.target}
x86_64.MacOSX.clang.c.includes=${junixsocket.native.default.c.includes}
x86_64.MacOSX.clang.c.excludes=
x86_64.MacOSX.clang.java.include=
x86_64.MacOSX.clang.java.runtimeDirectory=IGNORED
x86_64.MacOSX.clang.lib.prefix=lib
x86_64.MacOSX.clang.shared.prefix=lib
x86_64.MacOSX.clang.static.extension=a
x86_64.MacOSX.clang.shared.extension=dylib
x86_64.MacOSX.clang.plugin.extension=bundle
# NOTE: jnilib is also hardcoded in nar-maven-plugin's GccLinker#getLinker(LinkType)
x86_64.MacOSX.clang.jni.extension=jnilib
x86_64.MacOSX.clang.executable.extension=
x86_64.MacOSX.clang.cpp.compiler=clang++
x86_64.MacOSX.clang.cpp.defines=
x86_64.MacOSX.clang.cpp.options=${junixsocket.native.clang.cpp.options} -target ${junixsocket.native.llvm.target}
x86_64.MacOSX.clang.cpp.includes=${junixsocket.native.default.cpp.includes}
x86_64.MacOSX.clang.cpp.excludes=

amd64.Linux.clang.linker.name=clang
amd64.Linux.clang.linker.options=-nostdlib -target ${junixsocket.native.llvm.target}
amd64.Linux.clang.c.compiler=clang
amd64.Linux.clang.c.defines=_GNU_SOURCE
amd64.Linux.clang.c.options=${junixsocket.native.clang.c.options} -I${project.basedir}/src/main/c/jni -target ${junixsocket.native.llvm.target}
amd64.Linux.clang.c.includes=${junixsocket.native.default.c.includes}
amd64.Linux.clang.c.excludes=
amd64.Linux.clang.java.include=
amd64.Linux.clang.java.runtimeDirectory=IGNORED
amd64.Linux.clang.lib.prefix=lib
amd64.Linux.clang.shared.prefix=lib
amd64.Linux.clang.static.extension=a
amd64.Linux.clang.shared.extension=so
amd64.Linux.clang.plugin.extension=so
amd64.Linux.clang.jni.extension=so
amd64.Linux.clang.executable.extension=
amd64.Linux.clang.cpp.compiler=clang++
amd64.Linux.clang.cpp.defines=_GNU_SOURCE
amd64.Linux.clang.cpp.options=${junixsocket.native.clang.cpp.options} -target ${junixsocket.native.llvm.target}
amd64.Linux.clang.cpp.includes=${junixsocket.native.default.cpp.includes}
amd64.Linux.clang.cpp.excludes=
    